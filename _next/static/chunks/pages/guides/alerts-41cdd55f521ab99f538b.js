_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[12],{ZM4Q:function(e,t,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/guides/alerts",function(){return a("gmV/")}])},"gmV/":function(e,t,a){"use strict";a.r(t),a.d(t,"meta",(function(){return p})),a.d(t,"default",(function(){return d}));var n=a("wx14"),r=a("Ff2n"),l=a("q1tI"),b=a.n(l),s=a("7ljp"),i=a("er9C"),o=["children"],c=["components"],p=(b.a.createElement,{id:"alerts",title:"Alerts"}),m={meta:p},u=function(e){var t=e.children,a=Object(r.a)(e,o);return Object(s.b)(i.a,Object(n.a)({meta:p},a),t)};function d(e){var t=e.components,a=Object(r.a)(e,c);return Object(s.b)(u,Object(n.a)({},m,a,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"Alerts are the types of condition that will trigger Monika to send notification. It is an array located on probes defined in the config file ",Object(s.b)("inlineCode",{parentName:"p"},"monika.yml")," like so."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-yaml"},"probes:\n  id: '1'\n  name: Name of the probe\n  requests:\n    - alerts:\n        - query: response.size >= 10000\n          message: Response size is {{ response.size }}, expecting less than 10000\n")),Object(s.b)("p",null,"You can define alerts in two ways: ",Object(s.b)("strong",{parentName:"p"},"request alerts")," and ",Object(s.b)("strong",{parentName:"p"},"probe alerts")),Object(s.b)("h3",{id:"request-alerts"},"Request Alerts",Object(s.b)("a",{parentName:"h3",href:"#request-alerts",title:"Direct link to heading",className:"anchor"},Object(s.b)("span",{parentName:"a",className:"icon icon-link"}))),Object(s.b)("p",null,"Request alerts are ",Object(s.b)("inlineCode",{parentName:"p"},"alerts")," configurations that are put under the ",Object(s.b)("inlineCode",{parentName:"p"},"requests")," key. Alerts defined under a specific request will run for that request only. Take a look at an example below:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-yaml"},"probes:\n  id: '1'\n  name: Name of the probe\n  requests:\n    - method: GET\n      url: https://github.com\n      alerts:\n        - query: response.status != 200\n          message: Status not 2xx # (This alert is only triggered for the github.com request)\n    - method: GET\n      url: https://gitlab.com\n      alerts:\n        - query: response.status != 200\n          message: Status not 2xx # (This alert is only triggered for the gitlab.com request)\n")),Object(s.b)("h3",{id:"probe-alerts"},"Probe Alerts",Object(s.b)("a",{parentName:"h3",href:"#probe-alerts",title:"Direct link to heading",className:"anchor"},Object(s.b)("span",{parentName:"a",className:"icon icon-link"}))),Object(s.b)("p",null,"Probe alerts are ",Object(s.b)("inlineCode",{parentName:"p"},"alerts")," configurations that are put under the ",Object(s.b)("inlineCode",{parentName:"p"},"probe")," key. Alerts defined under a specific probe will run for all requests. Take a look at an example below:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-yaml"},"probes:\n  id: '1'\n  name: Name of the probe\n  requests:\n    - method: GET\n      url: https://github.com\n      alerts:\n        - query: response.status != 200\n          message: Status not 2xx # (This alert is only triggered for the github.com request)\n    - method: GET\n      url: https://gitlab.com\n      alerts:\n        - query: response.status != 200\n          message: Status not 2xx # (This alert is only triggered for the gitlab.com request)\n  alerts:\n    - query: response.time > 10000\n      message: Response time is longer than 10 seconds # (This alert is triggered for all request)\n")),Object(s.b)("h2",{id:"alert-timing"},"Alert Timing",Object(s.b)("a",{parentName:"h2",href:"#alert-timing",title:"Direct link to heading",className:"anchor"},Object(s.b)("span",{parentName:"a",className:"icon icon-link"}))),Object(s.b)("p",null,"Probes are performed after every interval, and alerts are generated after a specified threshold. Monika can perform probes once a second, therefore a theoretical maximum rate of one alert a second. Please keep in mind that there also some delays to your network, notification channels (slack, email, etc), so your result will vary."),Object(s.b)("p",null,"In general it will be something like:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-text"},"Alert resolution = interval period (s) x threshold + network_and_channel_latencies\n")),Object(s.b)("p",null,"From above, the theoretical maximum resolution is one second."),Object(s.b)("h2",{id:"alert-query"},"Alert Query",Object(s.b)("a",{parentName:"h2",href:"#alert-query",title:"Direct link to heading",className:"anchor"},Object(s.b)("span",{parentName:"a",className:"icon icon-link"}))),Object(s.b)("p",null,"Query contains any arbitrary expression that will trigger alert when it returns a truthy value"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-yaml"},"alerts:\n  - query: response.status == 500\n")),Object(s.b)("p",null,"Inside the query expression you can get the response object."),Object(s.b)("p",null,"These are values that are available:"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"response.status: HTTP status code of the reponse"),Object(s.b)("li",{parentName:"ul"},"response.time: the time it takes to perform a HTTP request"),Object(s.b)("li",{parentName:"ul"},"response.size: size of the response in bytes"),Object(s.b)("li",{parentName:"ul"},"response.headers: HTTP response headers"),Object(s.b)("li",{parentName:"ul"},"response.body: HTTP response body (if content-type is JSON, it will be parsed automatically)")),Object(s.b)("p",null,"The ",Object(s.b)("inlineCode",{parentName:"p"},"response.headers")," and ",Object(s.b)("inlineCode",{parentName:"p"},"response.body")," can be queried further with object access syntax."),Object(s.b)("p",null,"For example, to trigger alert when content-type is not json you may use"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-yaml"},"alerts:\n  - query: response.headers['content-type'] != \"application/json\"\n")),Object(s.b)("p",null,"Or to query value inside the body"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-yaml"},'alerts:\n  - query: response.body.data.todos[0].title != "Drink water"\n')),Object(s.b)("p",null,"Additionaly you can have proccessing done in your queries. For instance, to ensure case insensitivity, you might want to convert to lower case. It might look something like this:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-yaml"},'alerts:\n  - query: has(lowerCase(response.body.status), "success")\n')),Object(s.b)("p",null,"These operators are available:"),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",{parentName:"tr",align:null},"Numeric arithmetic"),Object(s.b)("th",{parentName:"tr",align:null},"Description"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"x + y"),Object(s.b)("td",{parentName:"tr",align:null},"Add")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"x - y"),Object(s.b)("td",{parentName:"tr",align:null},"Subtract")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"x ","*"," y"),Object(s.b)("td",{parentName:"tr",align:null},"Multiply")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"x / y"),Object(s.b)("td",{parentName:"tr",align:null},"Divide")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"x % y"),Object(s.b)("td",{parentName:"tr",align:null},"Modulo")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"x ^ y"),Object(s.b)("td",{parentName:"tr",align:null},"Power")))),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",{parentName:"tr",align:null},"Comparisons"),Object(s.b)("th",{parentName:"tr",align:null},"Description"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"x == y"),Object(s.b)("td",{parentName:"tr",align:null},"Equals")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"x != y"),Object(s.b)("td",{parentName:"tr",align:null},"Does not equal")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"x < y"),Object(s.b)("td",{parentName:"tr",align:null},"Less than")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"x <= y"),Object(s.b)("td",{parentName:"tr",align:null},"Less than or equal to")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"x > y"),Object(s.b)("td",{parentName:"tr",align:null},"Greater than")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"x >= y"),Object(s.b)("td",{parentName:"tr",align:null},"Greater than or equal to")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"x ~= y"),Object(s.b)("td",{parentName:"tr",align:null},"Regular expression match")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"x in (a, b, c)"),Object(s.b)("td",{parentName:"tr",align:null},"Equivalent to (x == a or x == b or x == c)")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"x not in (a, b, c)"),Object(s.b)("td",{parentName:"tr",align:null},"Equivalent to (x != a and x != b and x != c)")))),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",{parentName:"tr",align:null},"Boolean logic"),Object(s.b)("th",{parentName:"tr",align:null},"Description"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"x or y"),Object(s.b)("td",{parentName:"tr",align:null},"Boolean or")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"x and y"),Object(s.b)("td",{parentName:"tr",align:null},"Boolean and")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"not x"),Object(s.b)("td",{parentName:"tr",align:null},"Boolean not")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"x ? y : z"),Object(s.b)("td",{parentName:"tr",align:null},"If boolean x, value y, else z")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"( x )"),Object(s.b)("td",{parentName:"tr",align:null},"Explicity operator precedence")))),Object(s.b)("p",null,"There are also several helper functions available:"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},Object(s.b)("strong",{parentName:"p"},"has(object, property)"),": Checks whether an object has searched property."),Object(s.b)("p",{parentName:"li"},"example: ",Object(s.b)("inlineCode",{parentName:"p"},'has(response.body, "data")'),' checks if there is "data" property inside response.body')),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},Object(s.b)("strong",{parentName:"p"},"lowerCase(string)"),": Converts string to lower case"),Object(s.b)("p",{parentName:"li"},"example: ",Object(s.b)("inlineCode",{parentName:"p"},"lowerCase(response.body.message)")," converts message string value to lower case")),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},Object(s.b)("strong",{parentName:"p"},"upperCase(string)"),": Converts string to upper case"),Object(s.b)("p",{parentName:"li"},"example: ",Object(s.b)("inlineCode",{parentName:"p"},"upperCase(response.body.message)")," converts message string value to upper case")),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},Object(s.b)("strong",{parentName:"p"},"startsWith(string, target)"),": Checks if string starts with the given target string"),Object(s.b)("p",{parentName:"li"},"example: ",Object(s.b)("inlineCode",{parentName:"p"},'startsWith(response.body.message, "Hello")'),' checks if message string value starts with "Hello"')),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},Object(s.b)("strong",{parentName:"p"},"endsWith(string, target)"),": Checks if string ends with the given target string"),Object(s.b)("p",{parentName:"li"},"example: ",Object(s.b)("inlineCode",{parentName:"p"},'startsWith(response.body.message, "world!")'),' checks if message string value ends with "world!"')),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},Object(s.b)("strong",{parentName:"p"},"includes(collection, value)"),": Checks if value is in collection. If collection is a string, it's checked for a substring of value"),Object(s.b)("p",{parentName:"li"},"example 1: ",Object(s.b)("inlineCode",{parentName:"p"},'includes(response.body.prizes, "gold")'),' checks if "gold" exists in prizes array.'),Object(s.b)("p",{parentName:"li"},"example 2: ",Object(s.b)("inlineCode",{parentName:"p"},'includes(response.body.message, "ello")'),' checks if "ello" is substring of message string.')),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},Object(s.b)("strong",{parentName:"p"},"size(collection)"),": Gets length of array or string values."),Object(s.b)("p",{parentName:"li"},"example: ",Object(s.b)("inlineCode",{parentName:"p"},"size(response.body.data.items)")," gets the count of items.")),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},Object(s.b)("strong",{parentName:"p"},"isEmpty(value)"),": Checks if value is an empty object, empty array, empty string, null, or undefined."),Object(s.b)("p",{parentName:"li"},"example: ",Object(s.b)("inlineCode",{parentName:"p"},"isEmpty(response.body.data)")," checks whether the data propery is empty or not"))),Object(s.b)("h2",{id:"alert-message"},"Alert Message",Object(s.b)("a",{parentName:"h2",href:"#alert-message",title:"Direct link to heading",className:"anchor"},Object(s.b)("span",{parentName:"a",className:"icon icon-link"}))),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-yaml"},"alerts:\n  - query: response.status != 200\n    message: HTTP Status code is different, expecting 200\n")),Object(s.b)("p",null,"This is the message that is used in the sent notification."),Object(s.b)("p",null,"Inside the message string, you can also get the response object similar to query by surrounding the expression with double curly braces like the example above."),Object(s.b)("h2",{id:"further-reading"},"Further reading",Object(s.b)("a",{parentName:"h2",href:"#further-reading",title:"Direct link to heading",className:"anchor"},Object(s.b)("span",{parentName:"a",className:"icon icon-link"}))),Object(s.b)("ol",null,Object(s.b)("li",{parentName:"ol"},Object(s.b)("a",{parentName:"li",href:"./probes"},"Probes")),Object(s.b)("li",{parentName:"ol"},Object(s.b)("a",{parentName:"li",href:"./notifications"},"Notifications"))))}d.isMDXComponent=!0}},[["ZM4Q",0,1,2,3,4,5]]]);